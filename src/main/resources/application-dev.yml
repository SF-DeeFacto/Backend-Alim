server:
  port: ${SERVER_PORT:8082}

spring:
  datasource:
    url: jdbc:mysql://${DB_HOST:127.0.0.1}:${DB_PORT:3307}/${DB_NAME:dee-facto}?serverTimezone=UTC&useSSL=false&autoReconnect=true&useUnicode=true&characterEncoding=UTF-8
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:1234}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-test-query: SELECT 1
      validation-timeout: 5000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 30000
      max-lifetime: 1800000
  # JPA (Java Persistence API) 설정
  jpa:
    # Hibernate 설정
    hibernate:
      # 데이터베이스 스키마 자동 생성 설정 (환경 변수에서 가져오거나 기본값 update 사용)
      # update: 엔티티 변경사항을 자동으로 데이터베이스에 반영
      # create: 애플리케이션 시작 시 테이블을 새로 생성 (기존 데이터 삭제)
      # validate: 엔티티와 데이터베이스 스키마 일치 여부만 검증
      # none: 자동 스키마 생성 비활성화
      ddl-auto: ${DEV_HIBERNATE_DDL_AUTO:update}

    # SQL 쿼리 로그 출력 설정 (환경 변수에서 가져오거나 기본값 true 사용)
    show-sql: ${DEV_SHOW_SQL:true}

    # Hibernate 추가 속성 설정
    properties:
      hibernate:
        # SQL 쿼리 포맷팅 설정 (환경 변수에서 가져오거나 기본값 true 사용)
        # 가독성을 위해 들여쓰기 적용
        format_sql: ${DEV_FORMAT_SQL:true}

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:StrongPassword22!}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

aws:
  credentials:
    access-key: ${AWS_ACCESS_KEY:test}
    secret-key: ${AWS_SECRET_KEY:test}
  region: ${AWS_REGION:ap-northeast-2}
  sqs:
#  🔥 Local SQS 사용 시
#    endpoint-url: ${AWS_SQS_ENDPOINT_URL:http://localhost:4566}
    queue-url: ${AWS_SQS_QUEUE_URL:http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/your-queue-name}
